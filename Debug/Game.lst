SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Entwicklung\Casio\SDK\Snake\Game.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Game.c     1    #include "fxlib.h"
          Game.c     2    #include "SNAKE.h"
          Game.c     3    #include "timer.h"
          Game.c     4    #include "Graphics.h"
          Game.c     5    #include <stdlib.h>
          Game.c     6    #include <stdio.h>
          Game.c     7    #include "Game.h"
          Game.c     8    #include "Menu.h"
          Game.c     9    #include "Maps.h"
          Game.c    10    #include "Digits.h"
          Game.c    11    #include "MainMenuDetector.h"
          Game.c    12    
          Game.c    13    #define TIMER_ID ID_USER_TIMER2
          Game.c    14    
          Game.c    15    typedef struct point
          Game.c    16    {
          Game.c    17        char x;
          Game.c    18        char y;
          Game.c    19    } point_t;
          Game.c    20    
          Game.c    21    point_t snake[FWIDTH*FHEIGHT];
          Game.c    22    int snakeLength;
          Game.c    23    char dx = 1, dy = 0;
          Game.c    24    int difficulties[] = {250, 175, 100, 50};
          Game.c    25    point_t target = {-1, -1};
          Game.c    26    uint8_t *titlecapt;
          Game.c    27    int timeout;
          Game.c    28    int quitGame;
          Game.c    29    unsigned int *map;
          Game.c    30    
          Game.c    31    void _setTarget()
P   00000000              __setTarget:                     ; function: _setTarget
                                                           ; frame size=32
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
          Game.c    32    {
          Game.c    33        int i;
          Game.c    34        uchar blocked = 1;
    00000006 EC01                   MOV         #1,R12
    00000008 DE81                   MOV.L       L505+8,R14 ; _target
    0000000A 6DC3                   MOV         R12,R13
    0000000C 2FB6                   MOV.L       R11,@-R15
    0000000E 2FA6                   MOV.L       R10,@-R15
    00000010 2F96                   MOV.L       R9,@-R15
    00000012 2F86                   MOV.L       R8,@-R15
    00000014 4F22                   STS.L       PR,@-R15
    00000016 E81F                   MOV         #31,R8
    00000018 D97B                   MOV.L       L505,R9    ; _snakeLength
    0000001A DA7C                   MOV.L       L505+4,R10 ; _rand
          Game.c    35    
          Game.c    36        while(blocked)
    0000001C A026                   BRA         L455
    0000001E EB00                   MOV         #0,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000020              L456:                             
          Game.c    37        {
          Game.c    38            target.x = (uchar)((uint)rand() % FWIDTH);
    00000020 4A0B                   JSR         @R10
    00000022 0009                   NOP
    00000024 2089                   AND         R8,R0
          Game.c    39            target.y = (uchar)((uint)rand() % FHEIGHT);
    00000026 4A0B                   JSR         @R10
    00000028 2E00                   MOV.B       R0,@R14
    0000002A C90F                   AND         #15,R0
          Game.c    40            blocked = 0;
          Game.c    41            if(GetBlock(target.x, target.y, map)) blocked = 1;
    0000002C D279                   MOV.L       L505+12,R2 ; _map
    0000002E 6DB3                   MOV         R11,R13
    00000030 D379                   MOV.L       L505+16,R3 ; _GetBlock
    00000032 80E1                   MOV.B       R0,@(1,R14)
    00000034 6622                   MOV.L       @R2,R6
    00000036 84E1                   MOV.B       @(1,R14),R0
    00000038 6503                   MOV         R0,R5
    0000003A 430B                   JSR         @R3
    0000003C 64E0                   MOV.B       @R14,R4
    0000003E 600C                   EXTU.B      R0,R0
    00000040 2008                   TST         R0,R0
    00000042 8D01                   BT/S        L457
          Game.c    42            for(i = 0; i < snakeLength; i++)
    00000044 65B3                   MOV         R11,R5
    00000046 6DC3                   MOV         R12,R13
    00000048              L457:                             
    00000048 D474                   MOV.L       L505+20,R4 ; _snake
    0000004A A00C                   BRA         L458
    0000004C 0009                   NOP
    0000004E              L459:                             
          Game.c    43                if(snake[i].x == target.x && snake[i].y == target.y)
    0000004E 6240                   MOV.B       @R4,R2
    00000050 63E0                   MOV.B       @R14,R3
    00000052 3230                   CMP/EQ      R3,R2
    00000054 8B05                   BF          L460
    00000056 8441                   MOV.B       @(1,R4),R0
    00000058 6303                   MOV         R0,R3
    0000005A 84E1                   MOV.B       @(1,R14),R0
    0000005C 3300                   CMP/EQ      R0,R3
    0000005E 8B00                   BF          L460
          Game.c    44                    blocked = 1;
    00000060 6DC3                   MOV         R12,R13
    00000062              L460:                             
    00000062 7501                   ADD         #1,R5
    00000064 7402                   ADD         #2,R4
    00000066              L458:                             
    00000066 6392                   MOV.L       @R9,R3
    00000068 3533                   CMP/GE      R3,R5
    0000006A 8BF0                   BF          L459
    0000006C              L455:                             
    0000006C 6DDC                   EXTU.B      R13,R13
    0000006E 2DD8                   TST         R13,R13
    00000070 8BD6                   BF          L456
          Game.c    45        }
          Game.c    46    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000072 4F26                   LDS.L       @R15+,PR
    00000074 68F6                   MOV.L       @R15+,R8
    00000076 69F6                   MOV.L       @R15+,R9
    00000078 6AF6                   MOV.L       @R15+,R10
    0000007A 6BF6                   MOV.L       @R15+,R11
    0000007C 6CF6                   MOV.L       @R15+,R12
    0000007E 6DF6                   MOV.L       @R15+,R13
    00000080 000B                   RTS
    00000082 6EF6                   MOV.L       @R15+,R14
          Game.c    47    
          Game.c    48    void gameLoop1(void)
    00000084              _gameLoop1:                      ; function: gameLoop1
                                                           ; frame size=64
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    00000084 2FE6                   MOV.L       R14,@-R15
    00000086 2FD6                   MOV.L       R13,@-R15
    00000088 2FC6                   MOV.L       R12,@-R15
    0000008A 2FB6                   MOV.L       R11,@-R15
    0000008C 2FA6                   MOV.L       R10,@-R15
    0000008E 2F96                   MOV.L       R9,@-R15
    00000090 2F86                   MOV.L       R8,@-R15
    00000092 4F22                   STS.L       PR,@-R15
          Game.c    49    {
          Game.c    50        int i, x, y;
          Game.c    51        uchar *digit;
          Game.c    52    
          Game.c    53        if(quitGame != 0) return;
    00000094 DC62                   MOV.L       L505+24,R12; _quitGame
    00000096 7FE8                   ADD         #-24,R15
    00000098 63C2                   MOV.L       @R12,R3
    0000009A 2338                   TST         R3,R3
    0000009C 8901                   BT          L506
    0000009E A125                   BRA         L462
    000000A0 0009                   NOP
    000000A2              L506:                             
          Game.c    54    
          Game.c    55        // Move Body of Snake
          Game.c    56        for(i = snakeLength - 1; i > 0; i--)
    000000A2 DD59                   MOV.L       L505,R13   ; _snakeLength
    000000A4 DE5D                   MOV.L       L505+20,R14; _snake
    000000A6 65D2                   MOV.L       @R13,R5
    000000A8 75FF                   ADD         #-1,R5
    000000AA 6453                   MOV         R5,R4
    000000AC 74FF                   ADD         #-1,R4
    000000AE 4400                   SHLL        R4
    000000B0 66E3                   MOV         R14,R6
    000000B2 4500                   SHLL        R5
    000000B4 356C                   ADD         R6,R5
    000000B6 7502                   ADD         #2,R5
    000000B8 7602                   ADD         #2,R6
    000000BA 3566                   CMP/HI      R6,R5
    000000BC 8F09                   BF/S        L463
    000000BE 34EC                   ADD         R14,R4
    000000C0              L464:                             
          Game.c    57            snake[i] = snake[i - 1];
    000000C0 D358                   MOV.L       L505+28,R3 ; __slow_mvn




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C2 75FE                   ADD         #-2,R5
    000000C4 6153                   MOV         R5,R1
    000000C6 6243                   MOV         R4,R2
    000000C8 430B                   JSR         @R3
    000000CA E002                   MOV         #2,R0
    000000CC 3566                   CMP/HI      R6,R5
    000000CE 8DF7                   BT/S        L464
    000000D0 74FE                   ADD         #-2,R4
    000000D2              L463:                             
          Game.c    58        
          Game.c    59        // Move head of Snake
          Game.c    60        snake[0].x += dx;
    000000D2 64E3                   MOV         R14,R4
    000000D4 D154                   MOV.L       L505+32,R1 ; _dx
    000000D6 6310                   MOV.B       @R1,R3
    000000D8 6240                   MOV.B       @R4,R2
    000000DA 323C                   ADD         R3,R2
    000000DC 2420                   MOV.B       R2,@R4
          Game.c    61        snake[0].y += dy;
    000000DE D253                   MOV.L       L505+36,R2 ; _dy
    000000E0 8441                   MOV.B       @(1,R4),R0
    000000E2 6320                   MOV.B       @R2,R3
    000000E4 303C                   ADD         R3,R0
    000000E6 8041                   MOV.B       R0,@(1,R4)
          Game.c    62        if(snake[0].x < 0) snake[0].x = FWIDTH - 1;
    000000E8 6140                   MOV.B       @R4,R1
    000000EA 4111                   CMP/PZ      R1
    000000EC 8D02                   BT/S        L465
    000000EE E900                   MOV         #0,R9
    000000F0 E11F                   MOV         #31,R1
    000000F2 2E10                   MOV.B       R1,@R14
    000000F4              L465:                             
    000000F4 64E3                   MOV         R14,R4
    000000F6 E220                   MOV         #32,R2
    000000F8 6340                   MOV.B       @R4,R3
    000000FA 3323                   CMP/GE      R2,R3
    000000FC 8B00                   BF          L466
          Game.c    63        if(snake[0].x >= FWIDTH) snake[0].x = 0;
    000000FE 2490                   MOV.B       R9,@R4
    00000100              L466:                             
    00000100 64E3                   MOV         R14,R4
    00000102 8441                   MOV.B       @(1,R4),R0
    00000104 4011                   CMP/PZ      R0
    00000106 8901                   BT          L467
          Game.c    64        if(snake[0].y < 0) snake[0].y = FHEIGHT - 1;
    00000108 E00F                   MOV         #15,R0
    0000010A 8041                   MOV.B       R0,@(1,R4)
    0000010C              L467:                             
    0000010C 64E3                   MOV         R14,R4
    0000010E E310                   MOV         #16,R3
    00000110 8441                   MOV.B       @(1,R4),R0
    00000112 3033                   CMP/GE      R3,R0
    00000114 8B01                   BF          L468
          Game.c    65        if(snake[0].y >= FHEIGHT) snake[0].y = 0;
    00000116 6093                   MOV         R9,R0
    00000118 8041                   MOV.B       R0,@(1,R4)
    0000011A              L468:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Game.c    66    
          Game.c    67        // Check if Snake hits target
          Game.c    68        if(snake[0].x == target.x && snake[0].y == target.y)
    0000011A 64E3                   MOV         R14,R4
    0000011C D83C                   MOV.L       L505+8,R8  ; _target
    0000011E 6340                   MOV.B       @R4,R3
    00000120 6280                   MOV.B       @R8,R2
    00000122 3320                   CMP/EQ      R2,R3
    00000124 8B13                   BF          L469
    00000126 8441                   MOV.B       @(1,R4),R0
    00000128 6303                   MOV         R0,R3
    0000012A 8481                   MOV.B       @(1,R8),R0
    0000012C 3300                   CMP/EQ      R0,R3
    0000012E 8B0E                   BF          L469
          Game.c    69        {
          Game.c    70            _setTarget();
    00000130 BF66                   BSR         __setTarget
    00000132 0009                   NOP
          Game.c    71            snake[snakeLength] = snake[snakeLength - 1];
    00000134 61D2                   MOV.L       @R13,R1
    00000136 4100                   SHLL        R1
    00000138 62D2                   MOV.L       @R13,R2
    0000013A 31EC                   ADD         R14,R1
    0000013C D339                   MOV.L       L505+28,R3 ; __slow_mvn
    0000013E 72FF                   ADD         #-1,R2
    00000140 4200                   SHLL        R2
    00000142 32EC                   ADD         R14,R2
    00000144 430B                   JSR         @R3
    00000146 E002                   MOV         #2,R0
          Game.c    72            snakeLength++;
    00000148 60D2                   MOV.L       @R13,R0
    0000014A 7001                   ADD         #1,R0
    0000014C 2D02                   MOV.L       R0,@R13
    0000014E              L469:                             
          Game.c    73        }
          Game.c    74    
          Game.c    75        // Check if Snake hits itself
          Game.c    76        for(i = 1; i < snakeLength; i++)
    0000014E EA01                   MOV         #1,R10
    00000150 65A3                   MOV         R10,R5
    00000152 66E3                   MOV         R14,R6
    00000154 64E3                   MOV         R14,R4
    00000156 7402                   ADD         #2,R4
    00000158 A00D                   BRA         L470
    0000015A 6BE3                   MOV         R14,R11
    0000015C              L471:                             
          Game.c    77        {
          Game.c    78            if(snake[0].x == snake[i].x && snake[0].y == snake[i].y)
    0000015C 62B0                   MOV.B       @R11,R2
    0000015E 6340                   MOV.B       @R4,R3
    00000160 3230                   CMP/EQ      R3,R2
    00000162 8B06                   BF          L472
    00000164 84B1                   MOV.B       @(1,R11),R0
    00000166 6303                   MOV         R0,R3
    00000168 8441                   MOV.B       @(1,R4),R0
    0000016A 3300                   CMP/EQ      R0,R3
    0000016C 8B01                   BF          L472




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Game.c    79            {
          Game.c    80                quitGame = GAMEND_LOOSE;
    0000016E E302                   MOV         #2,R3
    00000170 2C32                   MOV.L       R3,@R12
    00000172              L472:                             
    00000172 7501                   ADD         #1,R5
    00000174 7402                   ADD         #2,R4
    00000176              L470:                             
    00000176 62D2                   MOV.L       @R13,R2
    00000178 3523                   CMP/GE      R2,R5
    0000017A 8BEF                   BF          L471
          Game.c    81            }
          Game.c    82        }
          Game.c    83    
          Game.c    84        // Check if Snake hits wall
          Game.c    85        if(GetBlock(snake[0].x, snake[0].y, map))
    0000017C D125                   MOV.L       L505+12,R1 ; _map
    0000017E 65E3                   MOV         R14,R5
    00000180 D325                   MOV.L       L505+16,R3 ; _GetBlock
    00000182 6612                   MOV.L       @R1,R6
    00000184 2F52                   MOV.L       R5,@R15
    00000186 8451                   MOV.B       @(1,R5),R0
    00000188 64F2                   MOV.L       @R15,R4
    0000018A 6503                   MOV         R0,R5
    0000018C 430B                   JSR         @R3
    0000018E 6440                   MOV.B       @R4,R4
    00000190 600C                   EXTU.B      R0,R0
    00000192 2008                   TST         R0,R0
    00000194 8901                   BT          L473
          Game.c    86        {
          Game.c    87            quitGame = GAMEND_LOOSE;
    00000196 E302                   MOV         #2,R3
    00000198 2C32                   MOV.L       R3,@R12
    0000019A              L473:                             
          Game.c    88        }
          Game.c    89    
          Game.c    90        if(quitGame == GAMEND_LOOSE)
    0000019A 60C2                   MOV.L       @R12,R0
    0000019C 8802                   CMP/EQ      #2,R0
    0000019E 8B1E                   BF          L474
          Game.c    91        {
          Game.c    92            char text[20];
          Game.c    93            PopUpWin(5);
    000001A0 D323                   MOV.L       L505+40,R3 ; _PopUpWin
    000001A2 430B                   JSR         @R3
    000001A4 E405                   MOV         #5,R4
          Game.c    94            locate(3,3);
    000001A6 E503                   MOV         #3,R5
    000001A8 D222                   MOV.L       L505+44,R2 ; _locate
    000001AA 420B                   JSR         @R2
    000001AC 6453                   MOV         R5,R4
          Game.c    95            Print((uchar*)"GAME OVER");
    000001AE D422                   MOV.L       L505+48,R4 ; L409
    000001B0 D322                   MOV.L       L505+52,R3 ; _Print
    000001B2 430B                   JSR         @R3
    000001B4 0009                   NOP
          Game.c    96            locate(3,4);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B6 E504                   MOV         #4,R5
    000001B8 D21E                   MOV.L       L505+44,R2 ; _locate
    000001BA 420B                   JSR         @R2
    000001BC E403                   MOV         #3,R4
          Game.c    97            sprintf(text, "Score: %i", snakeLength - START_LENGTH);
    000001BE 63D2                   MOV.L       @R13,R3
    000001C0 D21F                   MOV.L       L505+56,R2 ; L410
    000001C2 73FC                   ADD         #-4,R3
    000001C4 2F36                   MOV.L       R3,@-R15
    000001C6 2F26                   MOV.L       R2,@-R15
    000001C8 D31E                   MOV.L       L505+60,R3 ; _sprintf
    000001CA 64F3                   MOV         R15,R4
    000001CC 430B                   JSR         @R3
    000001CE 740C                   ADD         #12,R4
          Game.c    98            Print((uchar*)text);
    000001D0 D21A                   MOV.L       L505+52,R2 ; _Print
    000001D2 7F08                   ADD         #8,R15
    000001D4 64F3                   MOV         R15,R4
    000001D6 420B                   JSR         @R2
    000001D8 7404                   ADD         #4,R4
    000001DA A084                   BRA         L439
    000001DC 0009                   NOP
    000001DE              L474:                             
          Game.c    99            Bdisp_PutDisp_DD();
          Game.c   100            return;
          Game.c   101        }
          Game.c   102    
          Game.c   103        if(CheckForMenu())
    000001DE D21A                   MOV.L       L505+64,R2 ; _CheckForMenu
    000001E0 420B                   JSR         @R2
    000001E2 0009                   NOP
    000001E4 600C                   EXTU.B      R0,R0
    000001E6 2008                   TST         R0,R0
    000001E8 8904                   BT          L475
          Game.c   104        {
          Game.c   105            KillTimer(TIMER_ID);
    000001EA D218                   MOV.L       L505+68,R2 ; _KillTimer
    000001EC 420B                   JSR         @R2
    000001EE E402                   MOV         #2,R4
          Game.c   106            return;
    000001F0 A07C                   BRA         L462
    000001F2 0009                   NOP
    000001F4              L475:                             
          Game.c   107        }
          Game.c   108    
          Game.c   109        Clear();
    000001F4 D316                   MOV.L       L505+72,R3 ; _Clear
    000001F6 430B                   JSR         @R3
    000001F8 0009                   NOP
          Game.c   110        for(x = 0; x < FWIDTH; x++)
    000001FA A043                   BRA         L476
    000001FC 6B93                   MOV         R9,R11
    000001FE              L477:                             
          Game.c   111        {
          Game.c   112            for(y = 0; y < FHEIGHT; y++)
    000001FE 6C93                   MOV         R9,R12
    00000200 63B3                   MOV         R11,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000202 4308                   SHLL2       R3
    00000204 A03A                   BRA         L478
    00000206 2F30                   MOV.B       R3,@R15
    00000208              L505:                             
    00000208 <00000000>             .DATA.L     _snakeLength
    0000020C <00000000>             .DATA.L     _rand
    00000210 <00000000>             .DATA.L     _target
    00000214 <00000000>             .DATA.L     _map
    00000218 <00000000>             .DATA.L     _GetBlock
    0000021C <00000000>             .DATA.L     _snake
    00000220 <00000000>             .DATA.L     _quitGame
    00000224 <00000000>             .DATA.L     __slow_mvn
    00000228 <00000000>             .DATA.L     _dx
    0000022C <00000000>             .DATA.L     _dy
    00000230 <00000000>             .DATA.L     _PopUpWin
    00000234 <00000000>             .DATA.L     _locate
    00000238 <00000000>             .DATA.L     L409
    0000023C <00000000>             .DATA.L     _Print
    00000240 <00000000>             .DATA.L     L410
    00000244 <00000000>             .DATA.L     _sprintf
    00000248 <00000000>             .DATA.L     _CheckForMenu
    0000024C <00000000>             .DATA.L     _KillTimer
    00000250 <00000000>             .DATA.L     _Clear
    00000254              L479:                             
          Game.c   113            {
          Game.c   114                if(GetBlock(x, y, map))
    00000254 D12A                   MOV.L       L507,R1    ; _map
    00000256 65C3                   MOV         R12,R5
    00000258 D32A                   MOV.L       L507+4,R3  ; _GetBlock
    0000025A 6612                   MOV.L       @R1,R6
    0000025C 430B                   JSR         @R3
    0000025E 64B3                   MOV         R11,R4
    00000260 600C                   EXTU.B      R0,R0
    00000262 2008                   TST         R0,R0
    00000264 8909                   BT          L480
          Game.c   115                {
          Game.c   116                    FillRect(x * TSIZE, y * TSIZE, TSIZE, TSIZE, 1);
    00000266 E704                   MOV         #4,R7
    00000268 D327                   MOV.L       L507+8,R3  ; _FillRect
    0000026A 65C3                   MOV         R12,R5
    0000026C 2FA6                   MOV.L       R10,@-R15
    0000026E 6673                   MOV         R7,R6
    00000270 84F4                   MOV.B       @(4,R15),R0
    00000272 4508                   SHLL2       R5
    00000274 430B                   JSR         @R3
    00000276 6403                   MOV         R0,R4
    00000278 7F04                   ADD         #4,R15
    0000027A              L480:                             
    0000027A 7C01                   ADD         #1,R12
    0000027C              L478:                             
    0000027C E210                   MOV         #16,R2
    0000027E 3C23                   CMP/GE      R2,R12
    00000280 8BE8                   BF          L479
    00000282 7B01                   ADD         #1,R11
    00000284              L476:                             
    00000284 E220                   MOV         #32,R2
    00000286 3B23                   CMP/GE      R2,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000288 8BB9                   BF          L477
          Game.c   117                }
          Game.c   118            }
          Game.c   119        }
          Game.c   120        digit = GetDigit(ICON_SNAKE_HEAD);
    0000028A D920                   MOV.L       L507+12,R9 ; _GetDigit
    0000028C 490B                   JSR         @R9
    0000028E E402                   MOV         #2,R4
          Game.c   121        DrawDigit(snake[0].x * TSIZE, snake[0].y * TSIZE, digit);
    00000290 DB1F                   MOV.L       L507+16,R11; _DrawDigit
    00000292 65E3                   MOV         R14,R5
    00000294 2F52                   MOV.L       R5,@R15
    00000296 6603                   MOV         R0,R6
    00000298 64F2                   MOV.L       @R15,R4
    0000029A 8451                   MOV.B       @(1,R5),R0
    0000029C 6440                   MOV.B       @R4,R4
    0000029E 6503                   MOV         R0,R5
    000002A0 4508                   SHLL2       R5
    000002A2 4B0B                   JSR         @R11
    000002A4 4408                   SHLL2       R4
          Game.c   122        digit = GetDigit(ICON_SNAKE_BODY);
    000002A6 490B                   JSR         @R9
    000002A8 E403                   MOV         #3,R4
    000002AA 2F02                   MOV.L       R0,@R15
          Game.c   123        for(i = 1; i < snakeLength; i++)
    000002AC A008                   BRA         L504
    000002AE 6CE3                   MOV         R14,R12
    000002B0              L482:                             
          Game.c   124        {
          Game.c   125            //FillRect(snake[i].x * TSIZE + 1, snake[i].y * TSIZE + 1, TSIZE - 1, TSIZE - 1, 1);
          Game.c   126            DrawDigit(snake[i].x * TSIZE, snake[i].y * TSIZE, digit);
    000002B0 66F2                   MOV.L       @R15,R6
    000002B2 84C1                   MOV.B       @(1,R12),R0
    000002B4 64C0                   MOV.B       @R12,R4
    000002B6 6503                   MOV         R0,R5
    000002B8 4508                   SHLL2       R5
    000002BA 4B0B                   JSR         @R11
    000002BC 4408                   SHLL2       R4
    000002BE 7A01                   ADD         #1,R10
    000002C0              L504:                             
    000002C0 63D2                   MOV.L       @R13,R3
    000002C2 3A33                   CMP/GE      R3,R10
    000002C4 8FF4                   BF/S        L482
    000002C6 7C02                   ADD         #2,R12
          Game.c   127        }
          Game.c   128        if(target.x >= 0 && target.y >= 0)
    000002C8 6180                   MOV.B       @R8,R1
    000002CA 4111                   CMP/PZ      R1
    000002CC 8B0B                   BF          L439
    000002CE 8481                   MOV.B       @(1,R8),R0
    000002D0 4011                   CMP/PZ      R0
    000002D2 8B08                   BF          L439
          Game.c   129        {
          Game.c   130            //DrawRect(target.x * TSIZE, target.y * TSIZE, TSIZE, TSIZE);
          Game.c   131            digit = GetDigit(ICON_TARGET);
    000002D4 490B                   JSR         @R9
    000002D6 E401                   MOV         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Game.c   132            DrawDigit(target.x * TSIZE, target.y * TSIZE, digit);
    000002D8 6480                   MOV.B       @R8,R4
    000002DA 6603                   MOV         R0,R6
    000002DC 8481                   MOV.B       @(1,R8),R0
    000002DE 6503                   MOV         R0,R5
    000002E0 4508                   SHLL2       R5
    000002E2 4B0B                   JSR         @R11
    000002E4 4408                   SHLL2       R4
    000002E6              L439:
          Game.c   133        }
          Game.c   134        Bdisp_PutDisp_DD();
    000002E6 D30B                   MOV.L       L507+20,R3 ; _Bdisp_PutDisp_DD
    000002E8 430B                   JSR         @R3
    000002EA 0009                   NOP
          Game.c   135    }
    000002EC              L462:                             
    000002EC 7F18                   ADD         #24,R15
    000002EE 4F26                   LDS.L       @R15+,PR
    000002F0 68F6                   MOV.L       @R15+,R8
    000002F2 69F6                   MOV.L       @R15+,R9
    000002F4 6AF6                   MOV.L       @R15+,R10
    000002F6 6BF6                   MOV.L       @R15+,R11
    000002F8 6CF6                   MOV.L       @R15+,R12
    000002FA 6DF6                   MOV.L       @R15+,R13
    000002FC 000B                   RTS
    000002FE 6EF6                   MOV.L       @R15+,R14
    00000300              L507:                             
    00000300 <00000000>             .DATA.L     _map
    00000304 <00000000>             .DATA.L     _GetBlock
    00000308 <00000000>             .DATA.L     _FillRect
    0000030C <00000000>             .DATA.L     _GetDigit
    00000310 <00000000>             .DATA.L     _DrawDigit
    00000314 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
          Game.c   136    
          Game.c   137    void gameLoop2(unsigned int key)
    00000318              _gameLoop2:                      ; function: gameLoop2
                                                           ; frame size=44
    00000318 2FE6                   MOV.L       R14,@-R15
    0000031A 6043                   MOV         R4,R0
    0000031C 915B                   MOV.W       L508,R1    ; H'7547
    0000031E EE01                   MOV         #1,R14
    00000320 D62F                   MOV.L       L508+10,R6 ; _dy
    00000322 3010                   CMP/EQ      R1,R0
    00000324 2FD6                   MOV.L       R13,@-R15
    00000326 ED00                   MOV         #0,R13
    00000328 D52E                   MOV.L       L508+14,R5 ; _dx
    0000032A 2FC6                   MOV.L       R12,@-R15
    0000032C 4F22                   STS.L       PR,@-R15
    0000032E 7FEC                   ADD         #-20,R15
    00000330 6760                   MOV.B       @R6,R7
    00000332 8D16                   BT/S        L443
    00000334 6C50                   MOV.B       @R5,R12
    00000336 8832                   CMP/EQ      #50,R0
    00000338 8913                   BT          L444
    0000033A 914D                   MOV.W       L508+2,R1  ; H'7545
    0000033C 3010                   CMP/EQ      R1,R0
    0000033E 8916                   BT          L445




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000340 8836                   CMP/EQ      #54,R0
    00000342 8914                   BT          L446
    00000344 9149                   MOV.W       L508+4,R1  ; H'7542
    00000346 3010                   CMP/EQ      R1,R0
    00000348 8916                   BT          L447
    0000034A 8838                   CMP/EQ      #56,R0
    0000034C 8914                   BT          L448
    0000034E 9145                   MOV.W       L508+6,R1  ; H'7544
    00000350 3010                   CMP/EQ      R1,R0
    00000352 8918                   BT          L449
    00000354 8834                   CMP/EQ      #52,R0
    00000356 8916                   BT          L450
    00000358 9141                   MOV.W       L508+8,R1  ; H'7532
    0000035A 3010                   CMP/EQ      R1,R0
    0000035C 891A                   BT          L451
    0000035E A05D                   BRA         L484
    00000360 0009                   NOP
    00000362              L443:                            ; case label 
          Game.c   138    {
          Game.c   139        char text[20];
          Game.c   140        switch(key)
          Game.c   141        {
          Game.c   142            case KEY_CTRL_DOWN:
          Game.c   143            case KEY_CHAR_2:
    00000362              L444:                            ; case label 
          Game.c   144                if(dy == -1) break;
    00000362 6073                   MOV         R7,R0
    00000364 88FF                   CMP/EQ      #-1,R0
    00000366 8959                   BT          L484
          Game.c   145                dx = 0; dy = 1; break;
    00000368 25D0                   MOV.B       R13,@R5
    0000036A A057                   BRA         L484
    0000036C 26E0                   MOV.B       R14,@R6
    0000036E              L445:                            ; case label 
          Game.c   146            case KEY_CTRL_RIGHT:
          Game.c   147            case KEY_CHAR_6:
    0000036E              L446:                            ; case label 
          Game.c   148                if(dx == -1) break;
    0000036E 60C3                   MOV         R12,R0
    00000370 88FF                   CMP/EQ      #-1,R0
    00000372 8953                   BT          L484
    00000374 A00C                   BRA         L440
          Game.c   149                dx = 1; dy = 0; break;
    00000376 25E0                   MOV.B       R14,@R5
    00000378              L447:                            ; case label 
          Game.c   150            case KEY_CTRL_UP:
          Game.c   151            case KEY_CHAR_8:
    00000378              L448:                            ; case label 
          Game.c   152                if(dy == 1) break;
    00000378 6073                   MOV         R7,R0
    0000037A 8801                   CMP/EQ      #1,R0
    0000037C 894E                   BT          L484
          Game.c   153                dx = 0; dy = -1; break;
    0000037E E2FF                   MOV         #-1,R2
    00000380 25D0                   MOV.B       R13,@R5
    00000382 A04B                   BRA         L484
    00000384 2620                   MOV.B       R2,@R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000386              L449:                            ; case label 
          Game.c   154            case KEY_CTRL_LEFT:
          Game.c   155            case KEY_CHAR_4:
    00000386              L450:                            ; case label 
          Game.c   156                if(dx == 1) break;
    00000386 60C3                   MOV         R12,R0
    00000388 8801                   CMP/EQ      #1,R0
    0000038A 8947                   BT          L484
          Game.c   157                dx = -1; dy = 0; break;
    0000038C E2FF                   MOV         #-1,R2
    0000038E 2520                   MOV.B       R2,@R5
    00000390              L440:
    00000390 A044                   BRA         L484
    00000392 26D0                   MOV.B       R13,@R6
    00000394              L451:                            ; case label 
          Game.c   158            case KEY_CTRL_EXIT:
          Game.c   159                KillTimer(TIMER_ID);
    00000394 D214                   MOV.L       L508+18,R2 ; _KillTimer
    00000396 420B                   JSR         @R2
    00000398 E402                   MOV         #2,R4
          Game.c   160                PopUpWin(5);
    0000039A D314                   MOV.L       L508+22,R3 ; _PopUpWin
    0000039C 430B                   JSR         @R3
    0000039E E405                   MOV         #5,R4
          Game.c   161                sprintf(text, "Score: %i", snakeLength - START_LENGTH);
    000003A0 D313                   MOV.L       L508+26,R3 ; _snakeLength
    000003A2 6232                   MOV.L       @R3,R2
    000003A4 D113                   MOV.L       L508+30,R1 ; L410
    000003A6 72FC                   ADD         #-4,R2
    000003A8 2F26                   MOV.L       R2,@-R15
    000003AA 2F16                   MOV.L       R1,@-R15
    000003AC D212                   MOV.L       L508+34,R2 ; _sprintf
    000003AE 64F3                   MOV         R15,R4
    000003B0 420B                   JSR         @R2
    000003B2 7408                   ADD         #8,R4
          Game.c   162                locate(3, 6);
    000003B4 D311                   MOV.L       L508+38,R3 ; _locate
    000003B6 7F08                   ADD         #8,R15
    000003B8 E506                   MOV         #6,R5
    000003BA 430B                   JSR         @R3
    000003BC E403                   MOV         #3,R4
          Game.c   163                Print((uchar*)text);
    000003BE D210                   MOV.L       L508+42,R2 ; _Print
    000003C0 420B                   JSR         @R2
    000003C2 64F3                   MOV         R15,R4
          Game.c   164                if(ShowMenuNoBorder(1, "Continue\nExit") == 1)
    000003C4 D50F                   MOV.L       L508+46,R5 ; L422
    000003C6 D310                   MOV.L       L508+50,R3 ; _ShowMenuNoBorder
    000003C8 430B                   JSR         @R3
    000003CA E401                   MOV         #1,R4
    000003CC 8801                   CMP/EQ      #1,R0
    000003CE 8B1F                   BF          L489
          Game.c   165                {
          Game.c   166                    quitGame = GAMEND_USEREXIT;
    000003D0 D30E                   MOV.L       L508+54,R3 ; _quitGame
    000003D2 A023                   BRA         L484
    000003D4 23E2                   MOV.L       R14,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D6              L508:                             
    000003D6 7547                   .DATA.W     H'7547
    000003D8 7545                   .DATA.W     H'7545
    000003DA 7542                   .DATA.W     H'7542
    000003DC 7544                   .DATA.W     H'7544
    000003DE 7532                   .DATA.W     H'7532
    000003E0 <00000000>             .DATA.L     _dy
    000003E4 <00000000>             .DATA.L     _dx
    000003E8 <00000000>             .DATA.L     _KillTimer
    000003EC <00000000>             .DATA.L     _PopUpWin
    000003F0 <00000000>             .DATA.L     _snakeLength
    000003F4 <00000000>             .DATA.L     L410
    000003F8 <00000000>             .DATA.L     _sprintf
    000003FC <00000000>             .DATA.L     _locate
    00000400 <00000000>             .DATA.L     _Print
    00000404 <00000000>             .DATA.L     L422
    00000408 <00000000>             .DATA.L     _ShowMenuNoBorder
    0000040C <00000000>             .DATA.L     _quitGame
    00000410              L489:                             
          Game.c   167                }
          Game.c   168                else
          Game.c   169                {
          Game.c   170                    SetTimer(TIMER_ID, timeout, gameLoop1);
    00000410 D63C                   MOV.L       L509+8,R6  ; _gameLoop1
    00000412 D33D                   MOV.L       L509+12,R3 ; _timeout
    00000414 D23D                   MOV.L       L509+16,R2 ; _SetTimer
    00000416 6532                   MOV.L       @R3,R5
    00000418 420B                   JSR         @R2
    0000041A E402                   MOV         #2,R4
          Game.c   171                }
          Game.c   172                break;
    0000041C              L484:                             
          Game.c   173        }
          Game.c   174        
          Game.c   175    }
    0000041C 7F14                   ADD         #20,R15
    0000041E 4F26                   LDS.L       @R15+,PR
    00000420 6CF6                   MOV.L       @R15+,R12
    00000422 6DF6                   MOV.L       @R15+,R13
    00000424 000B                   RTS
    00000426 6EF6                   MOV.L       @R15+,R14
          Game.c   176    
          Game.c   177    void gameQuit(void)
    00000428              _gameQuit:                       ; function: gameQuit
                                                           ; frame size=0
          Game.c   178    {
          Game.c   179        KillTimer(TIMER_ID);
    00000428 D339                   MOV.L       L509+20,R3 ; _KillTimer
    0000042A 432B                   JMP         @R3
    0000042C E402                   MOV         #2,R4
          Game.c   180    }
          Game.c   181    
          Game.c   182    int RunGame(uchar difficulty, int *score, unsigned int *_map)
    0000042E              _RunGame:                        ; function: RunGame
                                                           ; frame size=48
          Game.c   183    {
          Game.c   184        char text[20];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Game.c   185        int i;
          Game.c   186        unsigned int key;
          Game.c   187    
          Game.c   188        //titlecapt = CaptureMenuTitle();
          Game.c   189        quitGame = 0;
          Game.c   190        dx = 1;
    0000042E E301                   MOV         #1,R3
    00000430 D239                   MOV.L       L509+28,R2 ; _dx
    00000432 2FE6                   MOV.L       R14,@-R15
    00000434 2FD6                   MOV.L       R13,@-R15
    00000436 2FC6                   MOV.L       R12,@-R15
    00000438 2FB6                   MOV.L       R11,@-R15
    0000043A EC00                   MOV         #0,R12
    0000043C DE35                   MOV.L       L509+24,R14; _quitGame
    0000043E 4F22                   STS.L       PR,@-R15
          Game.c   191        dy = 0;
    00000440 D136                   MOV.L       L509+32,R1 ; _dy
    00000442 7FE4                   ADD         #-28,R15
          Game.c   192        map = _map;
          Game.c   193    
          Game.c   194        snakeLength = START_LENGTH;
    00000444 DD37                   MOV.L       L509+40,R13; _snakeLength
    00000446 1F51                   MOV.L       R5,@(4,R15)
    00000448 2EC2                   MOV.L       R12,@R14
    0000044A 2230                   MOV.B       R3,@R2
    0000044C 21C0                   MOV.B       R12,@R1
    0000044E E204                   MOV         #4,R2
          Game.c   195        for(i = 0; i < snakeLength; i++)
    00000450 D735                   MOV.L       L509+44,R7 ; _snake
    00000452 D333                   MOV.L       L509+36,R3 ; _map
    00000454 2362                   MOV.L       R6,@R3
    00000456 E608                   MOV         #8,R6
    00000458 2D22                   MOV.L       R2,@R13
    0000045A A009                   BRA         L491
    0000045C 65C3                   MOV         R12,R5
    0000045E              L492:                             
          Game.c   196        {
          Game.c   197            snake[i].y = FHEIGHT / 2;
    0000045E 6C53                   MOV         R5,R12
    00000460 4C00                   SHLL        R12
    00000462 3C7C                   ADD         R7,R12
    00000464 6063                   MOV         R6,R0
    00000466 80C1                   MOV.B       R0,@(1,R12)
          Game.c   198            snake[i].x = snakeLength - i;
    00000468 63D2                   MOV.L       @R13,R3
    0000046A 3358                   SUB         R5,R3
    0000046C 2C30                   MOV.B       R3,@R12
    0000046E 7501                   ADD         #1,R5
    00000470              L491:                             
    00000470 62D2                   MOV.L       @R13,R2
    00000472 3523                   CMP/GE      R2,R5
    00000474 8BF3                   BF          L492
          Game.c   199        }
          Game.c   200        target.x = FWIDTH / 2;
    00000476 E210                   MOV         #16,R2
          Game.c   201        target.y = FHEIGHT / 2;
          Game.c   202    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Game.c   203        timeout = difficulties[difficulty];
          Game.c   204        SetTimer(TIMER_ID, timeout, gameLoop1);
    00000478 D124                   MOV.L       L509+16,R1 ; _SetTimer
    0000047A 6063                   MOV         R6,R0
    0000047C D52B                   MOV.L       L509+48,R5 ; _target
    0000047E 644C                   EXTU.B      R4,R4
    00000480 D620                   MOV.L       L509+8,R6  ; _gameLoop1
    00000482 4408                   SHLL2       R4
    00000484 2520                   MOV.B       R2,@R5
    00000486 8051                   MOV.B       R0,@(1,R5)
    00000488 D029                   MOV.L       L509+52,R0 ; _difficulties
    0000048A 034E                   MOV.L       @(R0,R4),R3
    0000048C D21E                   MOV.L       L509+12,R2 ; _timeout
    0000048E 6533                   MOV         R3,R5
    00000490 2232                   MOV.L       R3,@R2
    00000492 410B                   JSR         @R1
    00000494 E402                   MOV         #2,R4
          Game.c   205        SetQuitHandler(gameQuit);
    00000496 D427                   MOV.L       L509+56,R4 ; _gameQuit
    00000498 D327                   MOV.L       L509+60,R3 ; _SetQuitHandler
    0000049A 430B                   JSR         @R3
    0000049C 0009                   NOP
    0000049E DB27                   MOV.L       L509+64,R11; _GetKey
    000004A0 9C2C                   MOV.W       L509,R12   ; H'7532
          Game.c   206    
          Game.c   207        while(1)
    000004A2              L494:                             
          Game.c   208        {
          Game.c   209            GetKey(&key);
    000004A2 4B0B                   JSR         @R11
    000004A4 64F3                   MOV         R15,R4
    000004A6 64E2                   MOV.L       @R14,R4
    000004A8 2448                   TST         R4,R4
    000004AA 8B06                   BF          L495
          Game.c   210            if(quitGame == 0)
          Game.c   211            {
          Game.c   212                gameLoop2(key);
    000004AC BF34                   BSR         _gameLoop2
    000004AE 64F2                   MOV.L       @R15,R4
          Game.c   213                if(quitGame == GAMEND_USEREXIT) break;
    000004B0 60E2                   MOV.L       @R14,R0
    000004B2 8801                   CMP/EQ      #1,R0
    000004B4 890F                   BT          L497
    000004B6 AFF4                   BRA         L494
    000004B8 0009                   NOP
    000004BA              L495:                             
          Game.c   214            }
          Game.c   215            else if(quitGame == GAMEND_USEREXIT)
    000004BA 6043                   MOV         R4,R0
    000004BC 8801                   CMP/EQ      #1,R0
    000004BE 890A                   BT          L497
          Game.c   216            {
          Game.c   217                break;
          Game.c   218            }
          Game.c   219            else
          Game.c   220            {
          Game.c   221                if(key == KEY_CTRL_EXIT || key == KEY_CTRL_ALPHA || key == KEY_CTRL_EXE)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C0 62F2                   MOV.L       @R15,R2
    000004C2 32C0                   CMP/EQ      R12,R2
    000004C4 8907                   BT          L497
    000004C6 911A                   MOV.W       L509+2,R1  ; H'7537
    000004C8 63F2                   MOV.L       @R15,R3
    000004CA 3310                   CMP/EQ      R1,R3
    000004CC 8903                   BT          L497
    000004CE 9317                   MOV.W       L509+4,R3  ; H'7534
    000004D0 62F2                   MOV.L       @R15,R2
    000004D2 3230                   CMP/EQ      R3,R2
    000004D4 8BE5                   BF          L494
    000004D6              L497:                             
          Game.c   222                    break;
          Game.c   223            }
          Game.c   224        }
          Game.c   225    
          Game.c   226        KillTimer(TIMER_ID);
    000004D6 D30E                   MOV.L       L509+20,R3 ; _KillTimer
    000004D8 430B                   JSR         @R3
    000004DA E402                   MOV         #2,R4
          Game.c   227        free(titlecapt);
    000004DC D218                   MOV.L       L509+68,R2 ; _titlecapt
    000004DE D319                   MOV.L       L509+72,R3 ; _free
    000004E0 430B                   JSR         @R3
    000004E2 6422                   MOV.L       @R2,R4
          Game.c   228        *score = snakeLength - START_LENGTH;
    000004E4 51F1                   MOV.L       @(4,R15),R1
    000004E6 63D2                   MOV.L       @R13,R3
    000004E8 73FC                   ADD         #-4,R3
    000004EA 2132                   MOV.L       R3,@R1
          Game.c   229        return quitGame;
    000004EC 60E2                   MOV.L       @R14,R0
          Game.c   230    }
    000004EE 7F1C                   ADD         #28,R15
    000004F0 4F26                   LDS.L       @R15+,PR
    000004F2 6BF6                   MOV.L       @R15+,R11
    000004F4 6CF6                   MOV.L       @R15+,R12
    000004F6 6DF6                   MOV.L       @R15+,R13
    000004F8 000B                   RTS
    000004FA 6EF6                   MOV.L       @R15+,R14
    000004FC              L509:                             
    000004FC 7532                   .DATA.W     H'7532
    000004FE 7537                   .DATA.W     H'7537
    00000500 7534                   .DATA.W     H'7534
    00000502 0000                   .DATA.W     0
    00000504 <00000000>             .DATA.L     _gameLoop1
    00000508 <00000000>             .DATA.L     _timeout
    0000050C <00000000>             .DATA.L     _SetTimer
    00000510 <00000000>             .DATA.L     _KillTimer
    00000514 <00000000>             .DATA.L     _quitGame
    00000518 <00000000>             .DATA.L     _dx
    0000051C <00000000>             .DATA.L     _dy
    00000520 <00000000>             .DATA.L     _map
    00000524 <00000000>             .DATA.L     _snakeLength
    00000528 <00000000>             .DATA.L     _snake
    0000052C <00000000>             .DATA.L     _target
    00000530 <00000000>             .DATA.L     _difficulties




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000534 <00000000>             .DATA.L     _gameQuit
    00000538 <00000000>             .DATA.L     _SetQuitHandler
    0000053C <00000000>             .DATA.L     _GetKey
    00000540 <00000000>             .DATA.L     _titlecapt
    00000544 <00000000>             .DATA.L     _free
D   00000000              _dx:                             ; static: dx
    00000000 01                     .DATA.B     H'01
    00000001              _dy:                             ; static: dy
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1
    00000004              _difficulties:                   ; static: difficulties
    00000004 000000FA00             .DATA.L     H'000000FA,H'000000AF,H'00000064,H'00000032
             0000AF0000   
             0064000000   
             32           
    00000014              _target:                         ; static: target
    00000014 FFFF                   .DATA.B     H'FF,H'FF
C   00000000              L409:
    00000000 47414D4520             .SDATA      "GAME OVER"
             4F564552     
    00000009 00                     .DATA.B     H'00
    0000000A 00000002               .RES.W      1
    0000000C              L410:
    0000000C 53636F7265             .SDATA      "Score: %i"
             3A202569     
    00000015 00                     .DATA.B     H'00
    00000016 00000002               .RES.W      1
    00000018              L422:
    00000018 436F6E7469             .SDATA      "Continue"
             6E7565       
    00000020 0A                     .DATA.B     H'0A
    00000021 45786974               .SDATA      "Exit"
    00000025 00                     .DATA.B     H'00
B   00000000              _snake:                          ; static: snake
    00000000 00000400               .RES.B      1024
    00000400              _snakeLength:                    ; static: snakeLength
    00000400 00000004               .RES.L      1
    00000404              _titlecapt:                      ; static: titlecapt
    00000404 00000004               .RES.L      1
    00000408              _timeout:                        ; static: timeout
    00000408 00000004               .RES.L      1
    0000040C              _quitGame:                       ; static: quitGame
    0000040C 00000004               .RES.L      1
    00000410              _map:                            ; static: map
    00000410 00000004               .RES.L      1
















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 01-Jan-2021 02:31:03  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      230



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000548 Byte(s)
CONSTANT SECTION (C):                               00000026 Byte(s)
DATA     SECTION (D):                               00000016 Byte(s)
BSS      SECTION (B):                               00000414 Byte(s)

 TOTAL PROGRAM SIZE: 00000998 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           19
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          15
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            87






























*** COMMAND PARAMETER ***


  -subcommand=C:\DOCUME~1\milky\LOCALS~1\Temp\hmk555.tmp 

