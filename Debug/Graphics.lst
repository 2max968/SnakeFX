SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Entwicklung\Casio\SDK\Snake\Graphics.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Graphics.c     1    #include "Graphics.h"
      Graphics.c     2    #include "fxlib.h"
      Graphics.c     3    #include <string.h>
      Graphics.c     4    #include "SNAKE.h"
      Graphics.c     5    
      Graphics.c     6    void DrawRect(int x, int y, int w, int h)
P   00000000              _DrawRect:                       ; function: DrawRect
                                                           ; frame size=36
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
      Graphics.c     7    {
      Graphics.c     8        int i;
      Graphics.c     9    
      Graphics.c    10        for(i = 0; i < w; i++)
    00000006 EC00                   MOV         #0,R12
    00000008 DE4D                   MOV.L       L403+4,R14 ; _Bdisp_SetPoint_VRAM
    0000000A 2FB6                   MOV.L       R11,@-R15
    0000000C 2FA6                   MOV.L       R10,@-R15
    0000000E 6B43                   MOV         R4,R11
    00000010 2F96                   MOV.L       R9,@-R15
    00000012 6A53                   MOV         R5,R10
    00000014 2F86                   MOV.L       R8,@-R15
    00000016 6963                   MOV         R6,R9
    00000018 4F22                   STS.L       PR,@-R15
    0000001A 6DB3                   MOV         R11,R13
    0000001C 7FFC                   ADD         #-4,R15
    0000001E 6873                   MOV         R7,R8
    00000020 2F72                   MOV.L       R7,@R15
    00000022 4915                   CMP/PL      R9
    00000024 38AC                   ADD         R10,R8
    00000026 8F0C                   BF/S        L379
    00000028 78FF                   ADD         #-1,R8
    0000002A              L380:                             
      Graphics.c    11        {
      Graphics.c    12            Bdisp_SetPoint_VRAM(x + i, y, 1);
    0000002A E601                   MOV         #1,R6
    0000002C 65A3                   MOV         R10,R5
    0000002E 4E0B                   JSR         @R14
    00000030 64D3                   MOV         R13,R4
      Graphics.c    13            Bdisp_SetPoint_VRAM(x + i, y + h - 1, 1);
    00000032 E601                   MOV         #1,R6
    00000034 6583                   MOV         R8,R5
    00000036 4E0B                   JSR         @R14
    00000038 64D3                   MOV         R13,R4
    0000003A 7C01                   ADD         #1,R12
    0000003C 3C93                   CMP/GE      R9,R12
    0000003E 8FF4                   BF/S        L380
    00000040 7D01                   ADD         #1,R13
    00000042              L379:                             
      Graphics.c    14        }
      Graphics.c    15        for(i = 1; i < h - 1; i++)
    00000042 EC01                   MOV         #1,R12
    00000044 6DA3                   MOV         R10,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000046 7D01                   ADD         #1,R13
    00000048 6AF2                   MOV.L       @R15,R10
    0000004A 39BC                   ADD         R11,R9
    0000004C 7AFF                   ADD         #-1,R10
    0000004E 3CA3                   CMP/GE      R10,R12
    00000050 8D0C                   BT/S        L381
    00000052 79FF                   ADD         #-1,R9
    00000054              L382:                             
      Graphics.c    16        {
      Graphics.c    17            Bdisp_SetPoint_VRAM(x, y + i, 1);
    00000054 E601                   MOV         #1,R6
    00000056 65D3                   MOV         R13,R5
    00000058 4E0B                   JSR         @R14
    0000005A 64B3                   MOV         R11,R4
      Graphics.c    18            Bdisp_SetPoint_VRAM(x + w - 1, y + i, 1);
    0000005C E601                   MOV         #1,R6
    0000005E 65D3                   MOV         R13,R5
    00000060 4E0B                   JSR         @R14
    00000062 6493                   MOV         R9,R4
    00000064 7C01                   ADD         #1,R12
    00000066 3CA3                   CMP/GE      R10,R12
    00000068 8FF4                   BF/S        L382
    0000006A 7D01                   ADD         #1,R13
    0000006C              L381:                             
      Graphics.c    19        }
      Graphics.c    20    }
    0000006C 7F04                   ADD         #4,R15
    0000006E 4F26                   LDS.L       @R15+,PR
    00000070 68F6                   MOV.L       @R15+,R8
    00000072 69F6                   MOV.L       @R15+,R9
    00000074 6AF6                   MOV.L       @R15+,R10
    00000076 6BF6                   MOV.L       @R15+,R11
    00000078 6CF6                   MOV.L       @R15+,R12
    0000007A 6DF6                   MOV.L       @R15+,R13
    0000007C 000B                   RTS
    0000007E 6EF6                   MOV.L       @R15+,R14
      Graphics.c    21    
      Graphics.c    22    void SetPoint(int x, int y, uint8_t val)
    00000080              _SetPoint:                       ; function: SetPoint
                                                           ; frame size=0
      Graphics.c    23    {
      Graphics.c    24        Bdisp_SetPoint_VRAM(x, y, val);
    00000080 D32F                   MOV.L       L403+4,R3  ; _Bdisp_SetPoint_VRAM
    00000082 432B                   JMP         @R3
    00000084 0009                   NOP
      Graphics.c    25    }
      Graphics.c    26    
      Graphics.c    27    void Clear()
    00000086              _Clear:                          ; function: Clear
                                                           ; frame size=0
      Graphics.c    28    {
      Graphics.c    29        Bdisp_AllClr_DDVRAM();
    00000086 D32F                   MOV.L       L403+8,R3  ; _Bdisp_AllClr_DDVRAM
    00000088 432B                   JMP         @R3
    0000008A 0009                   NOP
      Graphics.c    30    }
      Graphics.c    31    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Graphics.c    32    void FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t val)
    0000008C              _FillRect:                       ; function: FillRect
                                                           ; frame size=48
    0000008C 2FE6                   MOV.L       R14,@-R15
    0000008E 6043                   MOV         R4,R0
    00000090 2FD6                   MOV.L       R13,@-R15
    00000092 2FC6                   MOV.L       R12,@-R15
    00000094 2FB6                   MOV.L       R11,@-R15
    00000096 2FA6                   MOV.L       R10,@-R15
    00000098 2F96                   MOV.L       R9,@-R15
      Graphics.c    33    {
      Graphics.c    34        uint8_t i,j;
      Graphics.c    35        for(i = 0; i < w; i++)
    0000009A E900                   MOV         #0,R9
    0000009C 2F86                   MOV.L       R8,@-R15
    0000009E 4F22                   STS.L       PR,@-R15
    000000A0 D827                   MOV.L       L403+4,R8  ; _Bdisp_SetPoint_VRAM
    000000A2 7FF0                   ADD         #-16,R15
    000000A4 80FC                   MOV.B       R0,@(12,R15)
    000000A6 6053                   MOV         R5,R0
    000000A8 80F4                   MOV.B       R0,@(4,R15)
    000000AA 6063                   MOV         R6,R0
    000000AC 80F8                   MOV.B       R0,@(8,R15)
    000000AE 2F70                   MOV.B       R7,@R15
    000000B0 A017                   BRA         L383
    000000B2 6C93                   MOV         R9,R12
    000000B4              L384:                             
    000000B4 84F4                   MOV.B       @(4,R15),R0
    000000B6 6ACC                   EXTU.B      R12,R10
    000000B8 6BF0                   MOV.B       @R15,R11
    000000BA 600C                   EXTU.B      R0,R0
    000000BC 6E03                   MOV         R0,R14
    000000BE 6BBC                   EXTU.B      R11,R11
    000000C0 84FC                   MOV.B       @(12,R15),R0
    000000C2 4B15                   CMP/PL      R11
    000000C4 600C                   EXTU.B      R0,R0
    000000C6 3A0C                   ADD         R0,R10
    000000C8 8F0A                   BF/S        L385
      Graphics.c    36        {
      Graphics.c    37            for(j = 0; j < h; j++)
    000000CA 6D93                   MOV         R9,R13
    000000CC              L386:                             
      Graphics.c    38            {
      Graphics.c    39                Bdisp_SetPoint_VRAM(x+i,y+j,val);
    000000CC E033                   MOV         #51,R0
    000000CE 65E3                   MOV         R14,R5
    000000D0 06FC                   MOV.B       @(R0,R15),R6
    000000D2 480B                   JSR         @R8
    000000D4 64A3                   MOV         R10,R4
    000000D6 7D01                   ADD         #1,R13
    000000D8 63DC                   EXTU.B      R13,R3
    000000DA 33B3                   CMP/GE      R11,R3
    000000DC 8FF6                   BF/S        L386
    000000DE 7E01                   ADD         #1,R14
    000000E0              L385:                             
    000000E0 7C01                   ADD         #1,R12
    000000E2              L383:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000E2 63CC                   EXTU.B      R12,R3
    000000E4 84F8                   MOV.B       @(8,R15),R0
    000000E6 600C                   EXTU.B      R0,R0
    000000E8 3303                   CMP/GE      R0,R3
    000000EA 8BE3                   BF          L384
      Graphics.c    40            }
      Graphics.c    41        }
      Graphics.c    42    }
    000000EC 7F10                   ADD         #16,R15
    000000EE 4F26                   LDS.L       @R15+,PR
    000000F0 68F6                   MOV.L       @R15+,R8
    000000F2 69F6                   MOV.L       @R15+,R9
    000000F4 6AF6                   MOV.L       @R15+,R10
    000000F6 6BF6                   MOV.L       @R15+,R11
    000000F8 6CF6                   MOV.L       @R15+,R12
    000000FA 6DF6                   MOV.L       @R15+,R13
    000000FC 000B                   RTS
    000000FE 6EF6                   MOV.L       @R15+,R14
      Graphics.c    43    
      Graphics.c    44    void FillDotted()
    00000100              _FillDotted:                     ; function: FillDotted
                                                           ; frame size=32
    00000100 2FE6                   MOV.L       R14,@-R15
    00000102 2FD6                   MOV.L       R13,@-R15
    00000104 2FC6                   MOV.L       R12,@-R15
    00000106 2FB6                   MOV.L       R11,@-R15
    00000108 2FA6                   MOV.L       R10,@-R15
      Graphics.c    45    {
      Graphics.c    46        int x,y;
      Graphics.c    47        for(x = 0; x < 128; x++)
    0000010A EA40                   MOV         #64,R10
    0000010C DC0C                   MOV.L       L403+4,R12 ; _Bdisp_SetPoint_VRAM
    0000010E 2F96                   MOV.L       R9,@-R15
    00000110 2F86                   MOV.L       R8,@-R15
    00000112 E900                   MOV         #0,R9
    00000114 4F22                   STS.L       PR,@-R15
    00000116 6D93                   MOV         R9,R13
    00000118 9810                   MOV.W       L403,R8    ; H'0080
    0000011A              L387:                             
    0000011A 60D3                   MOV         R13,R0
    0000011C 4011                   CMP/PZ      R0
    0000011E 8F02                   BF/S        L388
      Graphics.c    48        {
      Graphics.c    49            for(y = 0; y < 64; y++)
    00000120 6E93                   MOV         R9,R14
    00000122 A005                   BRA         L389
    00000124 C901                   AND         #1,R0
    00000126              L388:                             
    00000126 6007                   NOT         R0,R0
    00000128 7001                   ADD         #1,R0
    0000012A C901                   AND         #1,R0
    0000012C 6007                   NOT         R0,R0
    0000012E 7001                   ADD         #1,R0
    00000130              L389:                             
    00000130 6B03                   MOV         R0,R11
    00000132              L390:                             
      Graphics.c    50            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Graphics.c    51                if((x%2)==(y%2))
    00000132 60E3                   MOV         R14,R0
    00000134 4011                   CMP/PZ      R0
    00000136 8B07                   BF          L392
    00000138 A00B                   BRA         L393
    0000013A C901                   AND         #1,R0
    0000013C              L403:                             
    0000013C 0080                   .DATA.W     H'0080
    0000013E 0000                   .DATA.W     0
    00000140 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    00000144 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000148              L392:                             
    00000148 6007                   NOT         R0,R0
    0000014A 7001                   ADD         #1,R0
    0000014C C901                   AND         #1,R0
    0000014E 6007                   NOT         R0,R0
    00000150 7001                   ADD         #1,R0
    00000152              L393:                             
    00000152 3B00                   CMP/EQ      R0,R11
    00000154 0629                   MOVT        R6
      Graphics.c    52                    Bdisp_SetPoint_VRAM(x, y, 1);
    00000156 65E3                   MOV         R14,R5
    00000158 4C0B                   JSR         @R12
    0000015A 64D3                   MOV         R13,R4
    0000015C 7E01                   ADD         #1,R14
    0000015E 3EA3                   CMP/GE      R10,R14
    00000160 8BE7                   BF          L390
    00000162 7D01                   ADD         #1,R13
    00000164 3D83                   CMP/GE      R8,R13
    00000166 8BD8                   BF          L387
      Graphics.c    53                else
      Graphics.c    54                    Bdisp_SetPoint_VRAM(x, y, 0);
      Graphics.c    55            }
      Graphics.c    56        }
      Graphics.c    57    }
    00000168 4F26                   LDS.L       @R15+,PR
    0000016A 68F6                   MOV.L       @R15+,R8
    0000016C 69F6                   MOV.L       @R15+,R9
    0000016E 6AF6                   MOV.L       @R15+,R10
    00000170 6BF6                   MOV.L       @R15+,R11
    00000172 6CF6                   MOV.L       @R15+,R12
    00000174 6DF6                   MOV.L       @R15+,R13
    00000176 000B                   RTS
    00000178 6EF6                   MOV.L       @R15+,R14
      Graphics.c    58    
      Graphics.c    59    #define CMPX (6*6)
      Graphics.c    60    #define CMPY (0)
      Graphics.c    61    #define CMPW (6*2)/*(6*9)*/
      Graphics.c    62    #define CMPH (8)
      Graphics.c    63    
      Graphics.c    64    uint8_t* CaptureAreaVRAM(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
    0000017A              _CaptureAreaVRAM:                ; function: CaptureAreaVRAM
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000017A 6043                   MOV         R4,R0
      Graphics.c    65    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Graphics.c    66        int i;
      Graphics.c    67        uint8_t* result = (uint8_t*)malloc(w * h);
    0000017C D344                   MOV.L       L404,R3    ; _malloc
    0000017E 2FE6                   MOV.L       R14,@-R15
    00000180 2FD6                   MOV.L       R13,@-R15
    00000182 2FC6                   MOV.L       R12,@-R15
    00000184 2FB6                   MOV.L       R11,@-R15
    00000186 6C63                   MOV         R6,R12
    00000188 2FA6                   MOV.L       R10,@-R15
    0000018A 6DCC                   EXTU.B      R12,R13
    0000018C 2F96                   MOV.L       R9,@-R15
    0000018E 2F86                   MOV.L       R8,@-R15
    00000190 4F22                   STS.L       PR,@-R15
    00000192 4F12                   STS.L       MACL,@-R15
    00000194 7FF4                   ADD         #-12,R15
    00000196 80F4                   MOV.B       R0,@(4,R15)
    00000198 2F50                   MOV.B       R5,@R15
    0000019A 6073                   MOV         R7,R0
    0000019C 80F8                   MOV.B       R0,@(8,R15)
    0000019E 84F8                   MOV.B       @(8,R15),R0
    000001A0 600C                   EXTU.B      R0,R0
    000001A2 2D0E                   MULU        R0,R13
    000001A4 0D1A                   STS         MACL,R13
    000001A6 430B                   JSR         @R3
    000001A8 64D3                   MOV         R13,R4
    000001AA 6A03                   MOV         R0,R10
      Graphics.c    68        for(i = 0; i < (w*h); i++)
    000001AC D839                   MOV.L       L404+4,R8  ; _Bdisp_GetPoint_VRAM
    000001AE 4D15                   CMP/PL      R13
    000001B0 8F20                   BF/S        L395
    000001B2 EE00                   MOV         #0,R14
    000001B4              L396:                             
      Graphics.c    69        {
      Graphics.c    70            uint8_t _x = i % w;
    000001B4 D338                   MOV.L       L404+8,R3  ; __modls
    000001B6 64CC                   EXTU.B      R12,R4
    000001B8 61E3                   MOV         R14,R1
    000001BA 430B                   JSR         @R3
    000001BC 6043                   MOV         R4,R0
    000001BE 6903                   MOV         R0,R9
      Graphics.c    71            uint8_t _y = i / w;
    000001C0 D236                   MOV.L       L404+12,R2 ; __divls
    000001C2 61E3                   MOV         R14,R1
    000001C4 420B                   JSR         @R2
    000001C6 6043                   MOV         R4,R0
    000001C8 6B03                   MOV         R0,R11
      Graphics.c    72            result[i] = Bdisp_GetPoint_VRAM(x + _x, y + _y);
    000001CA 63E3                   MOV         R14,R3
    000001CC 33AC                   ADD         R10,R3
    000001CE 6BBC                   EXTU.B      R11,R11
    000001D0 2F36                   MOV.L       R3,@-R15
    000001D2 699C                   EXTU.B      R9,R9
    000001D4 63F3                   MOV         R15,R3
    000001D6 7304                   ADD         #4,R3
    000001D8 6530                   MOV.B       @R3,R5
    000001DA 63F3                   MOV         R15,R3
    000001DC 655C                   EXTU.B      R5,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001DE 35BC                   ADD         R11,R5
    000001E0 7308                   ADD         #8,R3
    000001E2 6430                   MOV.B       @R3,R4
    000001E4 644C                   EXTU.B      R4,R4
    000001E6 480B                   JSR         @R8
    000001E8 349C                   ADD         R9,R4
    000001EA 7E01                   ADD         #1,R14
    000001EC 63F6                   MOV.L       @R15+,R3
    000001EE 3ED3                   CMP/GE      R13,R14
    000001F0 8FE0                   BF/S        L396
    000001F2 2300                   MOV.B       R0,@R3
    000001F4              L395:                             
      Graphics.c    73        }
      Graphics.c    74    }
    000001F4 7F0C                   ADD         #12,R15
    000001F6 4F16                   LDS.L       @R15+,MACL
    000001F8 4F26                   LDS.L       @R15+,PR
    000001FA 68F6                   MOV.L       @R15+,R8
    000001FC 69F6                   MOV.L       @R15+,R9
    000001FE 6AF6                   MOV.L       @R15+,R10
    00000200 6BF6                   MOV.L       @R15+,R11
    00000202 6CF6                   MOV.L       @R15+,R12
    00000204 6DF6                   MOV.L       @R15+,R13
    00000206 000B                   RTS
    00000208 6EF6                   MOV.L       @R15+,R14
      Graphics.c    75    
      Graphics.c    76    uint8_t* CaptureMenuTitle()
    0000020A              _CaptureMenuTitle:               ; function: CaptureMenuTitle
                                                           ; frame size=4
    0000020A 4F22                   STS.L       PR,@-R15
      Graphics.c    77    {
      Graphics.c    78        Bdisp_AllClr_DDVRAM();
    0000020C D324                   MOV.L       L404+16,R3 ; _Bdisp_AllClr_DDVRAM
    0000020E 430B                   JSR         @R3
    00000210 0009                   NOP
      Graphics.c    79        PrintXY(6*6, 0, (uint8_t*)"     MENU", 0);
    00000212 E700                   MOV         #0,R7
    00000214 D623                   MOV.L       L404+20,R6 ; L366
    00000216 6573                   MOV         R7,R5
    00000218 D223                   MOV.L       L404+24,R2 ; _PrintXY
    0000021A 420B                   JSR         @R2
    0000021C E424                   MOV         #36,R4
      Graphics.c    80        PrintXY(6*6+1, 0, (uint8_t*)"MAIN", 0);
    0000021E E700                   MOV         #0,R7
    00000220 D622                   MOV.L       L404+28,R6 ; L367
    00000222 6573                   MOV         R7,R5
    00000224 D320                   MOV.L       L404+24,R3 ; _PrintXY
    00000226 430B                   JSR         @R3
    00000228 E425                   MOV         #37,R4
      Graphics.c    81        return CaptureAreaVRAM(CMPX, CMPY, CMPW, CMPH);
    0000022A E708                   MOV         #8,R7
    0000022C E60C                   MOV         #12,R6
    0000022E E500                   MOV         #0,R5
    00000230 E424                   MOV         #36,R4
    00000232 AFA2                   BRA         _CaptureAreaVRAM
    00000234 4F26                   LDS.L       @R15+,PR
      Graphics.c    82    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Graphics.c    83    
      Graphics.c    84    uint8_t CompareMenuTitle(uint8_t* title)
    00000236              _CompareMenuTitle:               ; function: CompareMenuTitle
                                                           ; frame size=28
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    00000236 2FE6                   MOV.L       R14,@-R15
    00000238 2FD6                   MOV.L       R13,@-R15
      Graphics.c    85    {
      Graphics.c    86        int i, x, y;
      Graphics.c    87    
      Graphics.c    88        for(i = 0; i < CMPW*CMPH; i++)
    0000023A EE00                   MOV         #0,R14
    0000023C 2FC6                   MOV.L       R12,@-R15
    0000023E ED0C                   MOV         #12,R13
    00000240 2FB6                   MOV.L       R11,@-R15
    00000242 EC60                   MOV         #96,R12
    00000244 2FA6                   MOV.L       R10,@-R15
    00000246 4F22                   STS.L       PR,@-R15
    00000248 DA12                   MOV.L       L404+4,R10 ; _Bdisp_GetPoint_VRAM
    0000024A 7FFC                   ADD         #-4,R15
    0000024C 2F42                   MOV.L       R4,@R15
    0000024E              L399:                             
      Graphics.c    89        {
      Graphics.c    90            int val1, val2;
      Graphics.c    91            x = i % CMPW;
    0000024E 61E3                   MOV         R14,R1
    00000250 D311                   MOV.L       L404+8,R3  ; __modls
    00000252 430B                   JSR         @R3
    00000254 60D3                   MOV         R13,R0
    00000256 6B03                   MOV         R0,R11
      Graphics.c    92            y = i / CMPW;
    00000258 D210                   MOV.L       L404+12,R2 ; __divls
    0000025A 61E3                   MOV         R14,R1
    0000025C 420B                   JSR         @R2
    0000025E 60D3                   MOV         R13,R0
    00000260 6503                   MOV         R0,R5
      Graphics.c    93            val1 = Bdisp_GetPoint_VRAM(CMPX+x,CMPY+y);
    00000262 64B3                   MOV         R11,R4
    00000264 4A0B                   JSR         @R10
    00000266 7424                   ADD         #36,R4
    00000268 6403                   MOV         R0,R4
      Graphics.c    94            val2 = title[i];
    0000026A 60F2                   MOV.L       @R15,R0
    0000026C 05EC                   MOV.B       @(R0,R14),R5
    0000026E 655C                   EXTU.B      R5,R5
      Graphics.c    95            if(val1 != val2)
    00000270 3450                   CMP/EQ      R5,R4
    00000272 8901                   BT          L400
      Graphics.c    96                {return 0;}
    00000274 A004                   BRA         L401
    00000276 E000                   MOV         #0,R0
    00000278              L400:                             
    00000278 7E01                   ADD         #1,R14
    0000027A 3EC3                   CMP/GE      R12,R14
    0000027C 8BE7                   BF          L399
      Graphics.c    97        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Graphics.c    98        return 1;
    0000027E E001                   MOV         #1,R0
      Graphics.c    99    }
    00000280              L401:                             
    00000280 7F04                   ADD         #4,R15
    00000282 4F26                   LDS.L       @R15+,PR
    00000284 6AF6                   MOV.L       @R15+,R10
    00000286 6BF6                   MOV.L       @R15+,R11
    00000288 6CF6                   MOV.L       @R15+,R12
    0000028A 6DF6                   MOV.L       @R15+,R13
    0000028C 000B                   RTS
    0000028E 6EF6                   MOV.L       @R15+,R14
    00000290              L404:                             
    00000290 <00000000>             .DATA.L     _malloc
    00000294 <00000000>             .DATA.L     _Bdisp_GetPoint_VRAM
    00000298 <00000000>             .DATA.L     __modls
    0000029C <00000000>             .DATA.L     __divls
    000002A0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000002A4 <00000000>             .DATA.L     L366
    000002A8 <00000000>             .DATA.L     _PrintXY
    000002AC <00000000>             .DATA.L     L367
C   00000000              L366:
    00000000 2020202020             .SDATA      "     MENU"
             4D454E55     
    00000009 00                     .DATA.B     H'00
    0000000A 00000002               .RES.W      1
    0000000C              L367:
    0000000C 4D41494E               .SDATA      "MAIN"
    00000010 00                     .DATA.B     H'00
































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Dec-2020 08:19:40  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       99



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000002B0 Byte(s)
CONSTANT SECTION (C):                               00000011 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000002C1 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            7
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           8
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            38






























*** COMMAND PARAMETER ***


  -subcommand=C:\DOCUME~1\milky\LOCALS~1\Temp\hmk4D0.tmp 

